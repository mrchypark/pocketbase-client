// cmd/pbc-gen/template.go.tpl

package {{.PackageName}}

// This file was generated by pbc-gen. DO NOT EDIT.

import (
	"context"
	"github.com/mrchypark/pocketbase-client"
	"github.com/pocketbase/pocketbase/tools/types"
	"{{.JsonLibrary}}"
)

// ==============
//  Collection Types
// ==============

{{range .Collections}}
{{$collection := .}}

// {{$collection.StructName}} represents a record from the '{{$collection.CollectionName}}' collection.
type {{$collection.StructName}} struct {
	pocketbase.Record
}

// {{$collection.StructName}}Collection is a collection of {{$collection.StructName}} records.
type {{$collection.StructName}}Collection struct {
	*pocketbase.ListResult
	Items []*{{$collection.StructName}} `json:"items"`
}

// New{{$collection.StructName}} creates a new instance of {{$collection.StructName}} with the provided record.
func New{{$collection.StructName}}(r *pocketbase.Record) *{{$collection.StructName}} {
	return &{{$collection.StructName}}{Record: *r}
}

{{range .Fields}}
// {{.GoName}} returns the value of the '{{.JsonName}}' field.
func (m *{{$collection.StructName}}) {{.GoName}}() {{.GoType}} {
	return m.{{.GetterMethod}}("{{.JsonName}}")
}

// Set{{.GoName}} sets the value of the '{{.JsonName}}' field.
func (m *{{$collection.StructName}}) Set{{.GoName}}(value {{.GoType}}) {
	m.Set("{{.JsonName}}", value)
}
{{end}}
{{end}}

// ==============
//  Typed Helpers
// ==============

{{range .Collections}}
// Get{{.StructName}} fetches a single {{.StructName}} record by its ID.
func Get{{.StructName}}(client pocketbase.RecordServiceAPI, id string, opts *pocketbase.GetOneOptions) (*{{.StructName}}, error) {
	r, err := client.GetOne(context.Background(), "{{.CollectionName}}", id, opts)
	if err != nil {
		return nil, err
	}
	return New{{.StructName}}(r), nil
}

// Get{{.StructName}}s fetches a list of {{.StructName}} records.
func Get{{.StructName}}s(client pocketbase.RecordServiceAPI, opts *pocketbase.ListOptions) (*{{.StructName}}Collection, error) {
	listResult, err := client.GetList(context.Background(), "{{.CollectionName}}", opts)
	if err != nil {
		return nil, err
	}

	typedItems := make([]*{{.StructName}}, len(listResult.Items))
	for i, r := range listResult.Items {
		typedItems[i] = New{{.StructName}}(r)
	}

	return &{{.StructName}}Collection{
		ListResult: listResult,
		Items:      typedItems,
	}, nil
}
{{end}}