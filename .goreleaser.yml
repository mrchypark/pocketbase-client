# .goreleaser.yml
# -----------------------------------------------------------------------------
# GoReleaser 설정 파일
# 이 파일은 CLI 애플리케이션의 빌드, 아카이빙, 릴리스 과정을 정의합니다.
# -----------------------------------------------------------------------------
before:
  hooks:
    # Go 모듈 의존성을 정리하여 빌드 환경을 깨끗하게 유지합니다.
    - go mod tidy

builds:
  - # pbc-gen CLI 빌드 설정
    id: "pbc-gen"
    # CLI 애플리케이션의 main 패키지 경로
    dir: ./cmd/pbc-gen
    # 생성될 바이너리 파일의 이름
    binary: pbc-gen
    # 애플리케이션의 진입점(main) 파일
    main: .
    # 빌드를 지원할 운영체제 및 아키텍처 목록
    goos:
      - linux
      - windows
      - darwin # macOS
    goarch:
      - amd64
      - arm64
    # 빌드 시 적용할 ldflags
    # -s: 심볼 테이블 제거, -w: DWARF 디버깅 정보 제거로 바이너리 크기 최적화
    # -X: 빌드 시점에 버전 및 커밋 정보를 주입
    ldflags:
      - -s -w
      - -X main.version={{.Version}}
      - -X main.commit={{.Commit}}
      - -X main.date={{.Date}}

archives:
  - # 생성된 바이너리를 압축하는 아카이브 설정
    id: "pbc-gen-archive"
    # builds 설정의 `id`와 매핑
    builds:
      - "pbc-gen"
    # 아카이브 파일 이름 형식 지정
    name_template: >-
      {{ .ProjectName }}_
      {{- .Version }}_
      {{- .Os }}_
      {{- .Arch }}
    # 생성할 아카이브 포맷 (tar.gz 및 zip)
    format: binary
    # 릴리스에 포함될 추가 파일
    files:
      - README.md
      - LICENSE

checksum:
  # 릴리스된 아카이브의 무결성을 검증하기 위한 체크섬 파일 생성
  name_template: "checksums.txt"
  # 체크섬 알고리즘
  algorithm: sha256

release:
  # GitHub 릴리스 생성 설정
  # draft: true로 설정하면, 릴리스가 초안 상태로 생성되어 수동으로 게시할 수 있습니다.
  draft: false
  # prerelease: 'auto'는 버전 태그에 하이픈(-)이 포함된 경우(e.g., v1.0.0-beta) 시험판 릴리스로 표시합니다.
  prerelease: auto
  # 릴리스 노트 제목 커스터마이징
  name_template: "Release {{.Version}}"
  # 릴리스 노트 생성 설정
  footer: |
    ---
    **Full Changelog**: https://github.com/mrchypark/pocketbase-client/compare/{{ .PreviousTag }}...{{ .Tag }}

changelog:
  # 변경사항(Changelog) 생성 방식 설정
  # 커밋 메시지 제목을 기준으로 그룹화
  groups:
    - title: "🚀 Features"
      # 커밋 메시지 프리픽스가 'feat', 'feature'인 경우
      regexp: '^.*?feat(\(.*\))?:'
      order: 0
    - title: "🐛 Bug Fixes"
      # 커밋 메시지 프리픽스가 'fix', 'bugfix'인 경우
      regexp: '^.*?fix(\(.*\))?:'
      order: 1
    - title: "🔧 Maintenance"
      # 커밋 메시지 프리픽스가 'chore', 'refactor', 'style', 'test', 'docs', 'build', 'ci'인 경우
      regexp: '^.*?(chore|refactor|style|test|docs|build|ci)(\(.*\))?:'
      order: 2
  # 특정 커밋을 변경사항에서 제외
  filters:
    # 'Signed-off-by' 라인이 포함된 커밋 제외 (일반적으로 merge 커밋)
    exclude:
      - '(?i)signed-off-by'
      - '^test:'
      - '^Merge '